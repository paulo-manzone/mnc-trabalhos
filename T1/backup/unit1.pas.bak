unit Unit1;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, ComCtrls,
  StdCtrls, Buttons, Grids, Types;

type

  { TForm1 }

  TForm1 = class(TForm)
    Edit1: TEdit;
    Edit10: TEdit;
    Edit11: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Edit5: TEdit;
    Edit6: TEdit;
    Edit7: TEdit;
    Edit8: TEdit;
    Edit9: TEdit;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    GroupBox3: TGroupBox;
    Label1: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    PageControl1: TPageControl;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    SpeedButton3: TSpeedButton;
    SpeedButton4: TSpeedButton;
    SpeedButton5: TSpeedButton;
    SpeedButton6: TSpeedButton;
    SpeedButton7: TSpeedButton;
    SpeedButton8: TSpeedButton;
    StringGrid1: TStringGrid;
    StringGrid2: TStringGrid;
    StringGrid3: TStringGrid;
    StringGrid4: TStringGrid;
    StringGrid5: TStringGrid;
    StringGrid6: TStringGrid;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure SpeedButton3Click(Sender: TObject);
    procedure SpeedButton4Click(Sender: TObject);
    procedure SpeedButton5Click(Sender: TObject);
    procedure SpeedButton6Click(Sender: TObject);
    procedure SpeedButton8Click(Sender: TObject);
    procedure TabSheet2Show(Sender: TObject);
    {
    procedure GroupBox1Click(Sender: TObject);
    procedure Label1Click(Sender: TObject);
    procedure Label3Click(Sender: TObject);
    procedure PageControl1Change(Sender: TObject);

    procedure TabSheet2ContextPopup(Sender: TObject; MousePos: TPoint;
      var Handled: Boolean);
    }
  private
    { private declarations }
  public
    { public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.lfm}

uses
  Windows;



var
   m,n: Integer;
   SrollBarAltura, SrollBarLargura: Integer;

type
  Vetor = array of Extended;
  Matriz = array of array of Extended;


  function FxR1(f: string; x: Extended; var y: Extended): Word; stdcall; external 'Interpretador.dll';
  function FxRn(f: String; x: Vetor; colchetes: Boolean; var y: Extended): Word; stdcall; external 'Interpretador.dll';
//function ErrorToStr(Error: Word; Lang: string): string; stdcall; external 'Interpretador.dll';
//===============================================================
//-----------------------PARTE IMPORTANTE COMEÇO-----------------
//===============================================================




//===============================================================
// Copia Vetor

procedure CopiaVetor(V1, V2:Vetor);
var
   i:Integer;
begin
  for i:=1 to n do
      V1[i] :=V2[i];
end;
//===============================================================



//===============================================================
// Derivada Primeira
function DerivadaPrimeira(f: string;  Epsilon,x: Extended; var d: Extended): Word;
var
     k: Integer;
     h: Extended;
     p, q: Extended;
     y1, y2: Extended;
begin
     h:=1024*Epsilon;
     FxR1(f,(x+h),y1);
     FxR1(f,(x-h),y2);
     p:=(y1 - y2)/(2*h);
     for k:=0 to 10 do
     begin
       q:= p;
       h:=h/2;
       FxR1(f,(x+h),y1);
       FxR1(f,(x-h),y2);
       p:=(y1-y2)/(2*h);
       if(abs(p-q)<=Epsilon) then
           break;
     end;
     d:= p;
end;
//===============================================================



//===============================================================
// Derivada Segunda
function DerivadaSegunda(f: string; Epsilon,x: Extended; var d: Extended): Word;
var
     k: Integer;
     h: Extended;
     p, q: Extended;
     y1, y2, y3: Extended;
begin
      h:=1000*Epsilon;
      FxR1(f, x+(2*h), y1);
      FxR1(f, x, y2);
      FxR1(f, x-(2*h), y3);
      p:=(y1-(2*y2)+y3)/(4*h*h);
      showmessage( 'P = '+FloatToStr(p));
      for k:=1 to 20 do
      begin
        q:=p;
        h:=(h/2);
        FxR1(f, x+2*h, y1);
        FxR1(f, x, y2);
        FxR1(f, x-2*h, y3);
        p:=(y1-2*y2+y3)/(4*h *h);
        if abs(p-q)<Epsilon then
            break;

      end;
      d:=p;
end;
//===============================================================



//===============================================================
// Botao Calcula Derivada R¹
procedure TForm1.SpeedButton1Click(Sender: TObject);
var res: Extended;
begin
     if Edit1.Text = '' then
     begin
       ShowMessage('Digite alguma função');
       Edit1.setFocus;
       exit;
     end;
     if Edit2.Text = '' then
     begin
        ShowMessage('Digite algum x');
        Edit2.setFocus;
        exit;
     end;
     if Edit3.Text = '' then
     begin
        ShowMessage('Digite algum Epsilon');
        Edit3.setFocus;
        exit;
     end;
     if  ( StrToFloat(Edit3.Text) < 0.00000001) OR (StrToFloat(Edit3.Text)>0.001)then
     begin
         ShowMessage('Digite algum Epsilon entre 0,00000001 e 0,001');
         Edit3.setFocus;
         exit;
     end;
     if DerivadaPrimeira(Edit1.Text, StrToFloat(Edit3.Text), StrToFloat(Edit2.Text), res) <> 0 then
     begin
         showmessage('Algo de errado ocorreu');
     end;
     if DerivadaSegunda(Edit1.Text, StrToFloat(Edit3.Text), StrToFloat(Edit2.Text), res) <> 0 then
     begin
         showmessage('Algo de errado ocorreu');
     end;

     try

     DerivadaPrimeira(Trim(Edit1.Text), StrToFloat(Edit3.Text), StrToFloat(Edit2.Text), res);
     Edit4.Text:=FloatToStr(res);
     DerivadaSegunda(Trim(Edit1.Text), StrToFloat(Edit3.Text), StrToFloat(Edit2.Text), res);
     Edit5.Text:=FloatToStr(res);


     except
       showmessage('Algo de errado ocorreu');
     end;

end;

procedure TForm1.FormCreate(Sender: TObject);
begin


end;

procedure TForm1.FormShow(Sender: TObject);
begin
      SpeedButton3.Click;
      Edit1.SetFocus;
end;

//===============================================================






//===============================================================
// Derivada Parcial de Primeira Ordem
function DerivadaParcialPrimeira(f: string; var x: Vetor; i: Byte; Epsilon: Extended; var d: Extended): Word;
var
   h, xi, f2, f1, p, q : Extended;
   j: Integer;
begin
 SetLength(x, n+1);
 h:= 1000*Epsilon;
 xi:=x[i];
 x[i]:= xi+h;
 FxRn(f,x,true,f1);
 x[i]:= xi-h;
 FxRn(f,x,true,f2);
 x[i]:=xi; // Restaura
 p:= (f1-f2) / (2*h);
 for j:= 1 to 10 do
 begin
   q:= p;
   h:= h/2;
   x[i]:= xi+h;
   FxRn(f,x,true,f1);
   x[i]:= xi-h;
   FxRn(f,x,true,f2);
   x[i]:= xi; // Restaura
   p:= (f1-f2) / (2*h);
   if abs(p-q) < Epsilon then
      break;
 end;
 d:= p;
end;
//===============================================================




//===============================================================
// Calculo do Gradiente
function Gradiente(f: string; var x: Vetor; Epsilon: Extended; var g: Vetor; n: Integer): Word;
var
   i: Integer;
   dx: Extended;
begin
 SetLength(x, n+1);
 for i:=1 to n do
 begin
      try
        DerivadaParcialPrimeira(f,x,i,Epsilon,dx);
        g[i]:= dx;
      except
        showMessage('Erro ao calcular vetor gradiente');
      end;
 end;
end;
//===============================================================



//===============================================================
// Derivada Parcial de Segunda Ordem

function DerivadaParcialSegunda(f: string; var x: Vetor; i,j: Byte; Epsilon: Extended; var d: Extended): Word;
var
   h,xi,xj,f1,f2,f3,f4,p,q: Extended;
   cont: Integer;

begin
  SetLength(x, n+1);
  h:= 1000*Epsilon;
  xi:= x[i];
  xj:= x[j];
  if i <> j then
   begin
     x[i]:= xi+h; x[j]:= xj+h; FxRn(f,x,true, f1);
     x[j]:= xj-h; FxRn(f,x,true, f2);
     x[i]:= xi-h; FxRn(f,x,true, f4);
     x[j]:= xj+h; FxRn(f,x,true, f3);
     p:= (f1-f2-f3+f4) / (4*h*h)
   end
   else
   begin
     x[i]:= xi+2*h; FxRn(f,x,true, f1);
     x[i]:= xi-2*h; FxRn(f,x,true, f3);
     x[i]:= xi; FxRn(f,x,true, f2);
     p:= (f1-2*f2+f3) / (4*h*h);
   end;
   for cont:=1 to 10 do
   begin
     q:= p;
     h:= h/2;
     if i<>j then
     begin
       x[i]:= xi+h; x[j]:= xj+h; FxRn(f,x,true, f1);
       x[j]:= xj-h; FxRn(f,x,true, f2);
       x[i]:= xi-h; FxRn(f,x,true, f4);
       x[j]:= xj+h; FxRn(f,x,true, f3);
       p:= (f1-f2-f3+f4) / (4*h*h);
     end
     else
     begin
       x[i]:= xi+2*h; FxRn(f,x,true, f1);
       x[i]:= xi-2*h; FxRn(f,x,true, f3);
       x[i]:= xi; FxRn(f,x,true, f2);
       p:= (f1-2*f2+f3) / (4*h*h);
     end;
     if abs(p-q) < Epsilon then
       break;
   end;
  d:=p;

end;
//===============================================================




//===============================================================
// Calculo da Hessiana
function Hessiana(f: string; x: Vetor; Epsilon, d: Extended; var H: Matriz; n: Integer): Word;
var
   i, j: Integer;
   res: Extended;
   aux: Vetor;

begin
 SetLength(x, n+1);
 SetLength(H, (n+1), (n+1));
 for i:= 1 to n do
   for j:= i to n do
     begin
          aux:= x;
          DerivadaParcialSegunda(f, aux, i, j, Epsilon, res);
          H[i][j]:=res;
     end;

 for i:= 2 to n do
   for j:= 1 to i-1 do
     H[i][j]:= H[j][i];

end;
//===============================================================



//===============================================================
// Botão Limpa Campos
procedure TForm1.SpeedButton2Click(Sender: TObject);
begin
  Edit1.Text := '';
  Edit2.Text := '';
  Edit3.Text := '';
  Edit4.Text := '';
  Edit5.Text := '';
  Edit1.setFocus;
end;
//===============================================================



//===============================================================
// Botão Grade
procedure TForm1.SpeedButton3Click(Sender: TObject);
var
   i : Integer;
  begin
   try
      n := StrToInt(Edit6.Text);
   except
   begin
     ShowMessage('n inválido');
     Edit6.SetFocus;
     exit;
   end;
   end;
   if (n < 1) OR (n>20) then
   begin
     ShowMessage('n invalido: é necessário um n maior que 2 e menor que 20');
     Edit6.SetFocus;
     exit;
   end;
   if n < 2 then
   begin
     ShowMessage('n invalido: Use a parte acima para n = 1');
     Edit6.SetFocus;
     exit;
   end;
   //--- StringGrid1
   StringGrid1.ColCount := n+1;
   StringGrid1.Cells[0, 0] := 'i';
   StringGrid1.Cells[0, 1] := 'x[i]';
   for i := 1 to n do
     StringGrid1.Cells[i, 0] := IntToStr(i);
   if n <= 6 then
   begin
     StringGrid1.Height := 46;
     StringGrid1.Width := 68+n*64;
   end
   else
   begin
     StringGrid1.Height := 46+SrollBarAltura;
     StringGrid1.Width := 68+6*64;
   end;
   //--- StringGrid2
   StringGrid2.ColCount := n+1;
   StringGrid2.Cells[0, 0] := 'i';
   StringGrid2.Cells[0, 1] := 'G[i]';
   for i := 1 to n do
     StringGrid2.Cells[i, 0] := IntToStr(i);
   if n <= 6 then
   begin
     StringGrid2.Height := 46;
     StringGrid2.Width := 68+n*64;
   end
   else
   begin
     StringGrid2.Height := 46+SrollBarAltura;
     StringGrid2.Width := 68+6*64;
   end;
   //--- StringGrid3
   StringGrid3.ColCount := n+1;
   StringGrid3.RowCount := n+1;
   StringGrid3.Cells[0, 0] := 'H[i,j]';
   for i := 1 to n do
   begin
   StringGrid3.Cells[i, 0] := IntToStr(i);
   StringGrid3.Cells[0, i] := IntToStr(i);
   end;
   if n <= 6 then
   begin
   StringGrid3.Height := 25+n*21;
   StringGrid3.Width := 68+n*64;
   end
   else
   begin
   StringGrid3.Height := 151+SrollBarAltura;
   StringGrid3.Width := 452+SrollBarLargura;
   end;
   Edit7.SetFocus;
  end;
//===============================================================



//===============================================================
// Botao Gradiente e Hessiana
  procedure TForm1.SpeedButton4Click(Sender: TObject);
  var
      f: string;
      x, G: Vetor;
      H: Matriz;
      Epsilon, d: Extended;
      i, j, n: Integer;
  begin
      n:= StrToInt(Edit6.Text);
       SetLength(G, n+1);
       SetLength(H, (n+1),(n+1));
       SetLength(x, n+1);
      f := Trim(Edit7.Text); // Tira espaços do iinicio e fim da função

      //==========================VERIFICAÇÕES============
     if f = '' then
     begin
       showMessage('Digite a função');
       Edit7.SetFocus;
       exit;
     end;
     try
       Epsilon := StrToFloat(Edit8.Text)
     except
       showMessage('Valor inválido para Epsilon');
       Edit8.SetFocus;
       exit;
     end;
     if (Epsilon < 0.00000001) or (Epsilon > 0.001) then
     begin
       showMessage('Epsilon invalido: é necessário atender a 0,001<Epsilon<0,00000001');
       Edit8.SetFocus;
       exit;
     end;
     SetLength(x, n+1);
     for i := 1 to n do
       try
         //CARREGANDO O VETOR X
         x[i] := StrToFloat(StringGrid1.Cells[i,1]);
       except
         showMessage('Valor inválido para x['+IntToStr(i)+'].');
         StringGrid1.Col := i;
         StringGrid1.Row := 1;
         StringGrid1.SetFocus;
         exit;
     end;
     //==================================CALCULO EM SI===========
     if Gradiente(f, x, Epsilon, G, n) <> 0
     then begin
       showMessage('Algo saiu errado');
     end
     else begin
     for i := 1 to n do
       StringGrid2.Cells[i,1] := FloatToStr(G[i]);
     end;
     if Hessiana(f, x, Epsilon, d, H, n) <> 0
     then begin
       showMessage('Algo saiu errado')
     end
     //====================================COLOCANDO NO GRID=========
     else begin
     for i := 1 to n do
       for j := 1 to n do
         StringGrid3.Cells[j,i] := FloatToStr(H[i,j]);

     end;
  end;

procedure TForm1.SpeedButton5Click(Sender: TObject);
begin
    Edit7.Text := '';
    Edit8.Text := '';
    StringGrid1.Clean;
    StringGrid2.Clean;
    StringGrid3.Clean;
    SpeedButton3.Click;
    Edit6.Text := '';
end;
//=============================================================




//=============================================================
//Botão Calculo Jacobiano
procedure TForm1.SpeedButton6Click(Sender: TObject);
var
 f: string;
 x,G: Vetor;
 Epsilon,d: Extended;
 i,j, n: Integer;
begin
 // Calcular derivada primeira de cada f[i]: Rn -> R (linhas do jacobiano)
 // Rever entrada de dados n caso o usuário tenha feito a gracinha de modificar m ou n
 try
   Epsilon := StrToFloat(Edit11.Text)
 except
   ShowMessage('Valor inválido para Epsilon.');
   Edit11.SetFocus;
   exit;
 end;
 if (Epsilon > 0.001+10E-10) or (Epsilon < 0.0000001-10E-10) then
 begin
   ShowMessage('Epsilon fora do intervalo permitido');
   Edit11.SetFocus;
   exit;
 end;
 n:= StrToInt(Edit10.Text);
 m:= StrToInt(Edit9.Text);
 setLength(G, n+1);
 SetLength(x, n+1);
 for i := 1 to n do // Ler vetor x
  try
   x[i] := StrToFloat(StringGrid4.Cells[i,1]);
  except
   ShowMessage('Valor inválido para x['+IntToStr(i)+'].');
   StringGrid4.Col := i;
   StringGrid4.Row := 1;
   StringGrid4.SetFocus;
   exit;
  end;
 for i := 1 to m do
 begin
  f := Trim(StringGrid5.Cells[1,i]);
  if f = '' then
  begin
   ShowMessage('Função não encontrada');
   StringGrid5.Row := i;
   StringGrid5.SetFocus;
   exit;
  end;
  n:= StrToInt(Edit10.Text);
  if Gradiente(f,x,Epsilon,G, n) <>0
  then begin
   ShowMessage('Algo saiu errado');
  end
  else
  begin
   for j := 1 to n do
    StringGrid6.Cells[j,i] := FloatToStr(G[j]);
  end;
 end;

end;
//============================================================




//============================================================
//Botão Grade Jacobiano
procedure TForm1.SpeedButton8Click(Sender: TObject);
var
    i: Integer;
begin
 //===================VERIFICAÇÕES================
 try
    m := StrToInt(Edit9.Text);
 except
  begin
    ShowMessage('Numero de funções inválido.');
    Edit9.SetFocus;
    exit;
  end;
 end;
 if m < 2 then
 begin
   ShowMessage('M tem que ser maior que 2');
   Edit9.SetFocus;
   exit;
 end;
 if m > 10 then
 begin
  ShowMessage('M tem que ser menor que 10');
  Edit9.SetFocus;
  exit;
 end;
 try
  n := StrToInt(Edit10.Text);
 except
  begin
    ShowMessage('Numero de componentes de x inválido.');
    Edit10.SetFocus;
    exit;
  end;
 end;
 if n < 2 then
 begin
  ShowMessage('N tem que ser maior que 2');
  Edit10.SetFocus;
  exit;
 end;
 if n > 10 then
 begin
  ShowMessage('N tem que ser menor que 10');
  Edit10.SetFocus;
  exit;
 end;
 //================================SG4
 StringGrid4.ColCount := n+1;
 StringGrid4.Cells[0,0] := 'i';
 StringGrid4.Cells[0,1] := 'x[i]';
 for i := 1 to n do
  StringGrid4.Cells[i,0] := IntToStr(i);
 if n <= 6 then
 begin
   StringGrid4.Height := 48;
   StringGrid4.Width := 65+n*65;
 end
 else
 begin
   StringGrid4.Height := 56+SrollBarAltura;
   StringGrid4.Width := 68+6*65;
 end;
 if n=2 then
 begin
   StringGrid4.Height:=48;
   StringGrid4.Width:= 67+n*65;
 end;
  //=======================================SG5
 StringGrid5.ColWidths[1] := 384;
 StringGrid5.RowCount :=m+1;
 StringGrid5.Cells[0,0] := 'i';
 StringGrid5.Cells[1,0] := 'f[i]';
 for i := 1 to m do
  StringGrid5.Cells[0,i] := IntToStr(i);
  if m <= 6 then
  begin
   StringGrid5.Height := 23+m*23;
   StringGrid5.Width := 452;
  end
  else
  begin
   StringGrid5.Height := 151;
   StringGrid5.Width := 452+SrollBarLargura;
  end;
  if m=2 then
  begin
   StringGrid5.Height:=25+m*23;
   StringGrid5.Width := 453;
  end;
  //=======================================SG6
  StringGrid6.ColCount :=n+1;
  StringGrid6.RowCount :=m+1;
  StringGrid6.Cells[0,0] := 'J[i,j]';
  for i := 1 to m do
   StringGrid6.Cells[0,i] := IntToStr(i);
  for i := 1 to n do
   StringGrid6.Cells[i,0] := IntToStr(i);
  if (m <=6) and(n <=6) then
  begin
   StringGrid6.Height := 23+m*23;
   StringGrid6.Width := 66+n*65;
  end;
  if(m <=6) and(n >6) then
  begin
   StringGrid6.Height := 23+m*23+SrollBarAltura;
   StringGrid6.Width := 450;
  end;
  if(m >6) and(n <=6) then
  begin
    StringGrid6.Height := 151;
    StringGrid6.Width := 68+n*65+SrollBarLargura;
  end;
  if(m >6) and(n >6) then
  begin
   StringGrid6.Height := 151+SrollBarAltura;
   StringGrid6.Width := 452+SrollBarLargura;
  end;
  if PageControl1.ActivePage = TabSheet2 then
     StringGrid5.SetFocus;
  if m=2 then
  begin
   StringGrid6.Height:= 25+m*23+SrollBarAltura;
   StringGrid6.Width := 65+n*65;
  end;
end;

procedure TForm1.TabSheet2Show(Sender: TObject);
begin
     SpeedButton8.Click;
end;

//===============================================================





//===============================================================
{// Calculo do Jacobioano
function Jacobiano(): Word;
var

begin

end;}
//===============================================================


//===============================================================
//-------------------------PARTE IMPORTANTE FIM------------------
//===============================================================


end.

